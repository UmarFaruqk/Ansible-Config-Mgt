 pipeline {
               agent any
             
               environment {
                 ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
                 ANSIBLE_HOST_KEY_CHECKING = 'False'
               }
             
               stages {
                 stage("Initial cleanup") {
                   steps {
                     dir("${WORKSPACE}") {
                       deleteDir()
                     }
                   }
                 }

                 stage('Checkout SCM') {
                   steps {
                     git branch: 'main', url: 'https://github.com/UmarFaruqk/Ansible-Config-Mgt'
                   }
                 }
             
                 stage('Prepare Ansible For Execution') {
                   steps {
                     sh 'echo ${WORKSPACE}'
                     sh 'sed -i "3 a roles_path=${WORKSPACE}/roles" ${WORKSPACE}/deploy/ansible.cfg'
                   }
                 }
             
      stage('Test SSH Connection') {
      steps {
        sshagent(['private-key']) {
          sh 'ssh -o StrictHostKeyChecking=no -i /home/ubuntu/Downloads/web-server2.pem ec2-user@172.31.37.230 exit'
        }
      }
    }
                 stage('Run Ansible playbook') {
                   steps {
                     sshagent(['Private-Key']) {
                       ansiblePlaybook(
                         become: true,
                         credentialsId: 'Private-Key',
                         disableHostKeyChecking: true,
                         installation: 'ansible',
                         inventory: "${WORKSPACE}/inventory/dev.ini",
                         playbook: "${WORKSPACE}/playbooks/site.yml"
                       )
                     }
                   }
                 }
             
                 stage('Clean Workspace after build') {
                   steps {
                     cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
                   }
                 }
               }
             }
